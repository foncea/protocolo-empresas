{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"infeccio",
				"infecciosos_trabajando"
			],
			[
				"dia_hora",
				"dia_hora_inicial"
			],
			[
				"dia",
				"dia_hora_inicial"
			],
			[
				"area",
				"area_trabajo"
			],
			[
				"perd",
				"periodo_post_sintomas"
			],
			[
				"Simulado",
				"SimuladorEficiente"
			],
			[
				"Simu",
				"SimuladorEficiente"
			],
			[
				"numero",
				"numero_infecciosos"
			],
			[
				"his",
				"historia_infectados_totales"
			],
			[
				"in",
				"infeccioso"
			],
			[
				"Simulador",
				"SimuladorRoles"
			],
			[
				"actu",
				"actualizar_estados_actividades"
			],
			[
				"actualizar_estados_act",
				"actualizar_estados_actividades_roles"
			],
			[
				"estados_ac",
				"estados_actividades_roles"
			],
			[
				"contar_est",
				"contar_estado_actividad_rol"
			],
			[
				"c",
				"ctna_inic"
			],
			[
				"cua",
				"cuarentena_inicial"
			],
			[
				"estaa",
				"estados_actividades_df"
			],
			[
				"activi",
				"actividades_df"
			],
			[
				"estado",
				"estados_observados_df"
			],
			[
				"lagg",
				"lagged_infection_rate_beta"
			]
		]
	},
	"buffers":
	[
		{
			"contents": "import numpy as np\nimport datetime as dt\n\nclass AlgoritmoBios:\n    def __init__(self, cuarentena, frecuencia_test):\n        self.algoritmo_id = 'anticuerpos'\n        self.frecuencia_test = frecuencia_test\n        self.duracion_cuarentena = cuarentena['duracion']\n        self.cuarentena_inicial = cuarentena['inicial']\n\n        self.individuo = None\n\n        self.tiempo = 0\n        \n        self.numero_tests = 0\n        \n        self.tiempo_pcr = 4  #agregar como precision test\n    \n    def reset(self):\n        self.numero_tests = 0\n        self.tiempo = 0\n        self.individuo = None\n        \n    def tick(self):\n        self.numero_tests = 0\n    \n    def aplicar_test(self, precision_tests):        \n        self.resultado_test = self.individuo.testear_ac(precision_tests)\n        self.numero_tests += 1\n        \n    def asignar_estado(self):\n        if (not self.IgM) and (not self.IgG):\n            self.individuo.cambiar_estado_observado('susceptible')\n        elif self.IgM:\n            self.individuo.cambiar_estado_observado('infeccioso')\n        else:\n            self.individuo.cambiar_estado_observado('recuperado')\n            \n    def asignar_estado_segun_test(self):\n        if self.resultado_test:\n            self.individuo.cambiar_estado_observado('infeccioso')\n        else:\n            self.individuo.cambiar_estado_observado('susceptible')\n            \n    def asignar_actividad(self):\n        if self.individuo.estado_observado == 'infeccioso':\n            self.individuo.aplicar_cuarentena()\n        else:\n            self.individuo.aplicar_trabajo()\n            \n    def decidir(self, poblacion, tiempo, dia, precision_tests):\n        self.poblacion = poblacion\n        if tiempo < self.cuarentena_inicial:\n            for ind in poblacion.values():\n                self.individuo = ind\n                self.individuo.cuarentena_nacional = True\n                self.individuo.aplicar_cuarentena()\n                if self.individuo.sintomatico:\n                    self.individuo.cambiar_estado_observado('infeccioso')\n                self.poblacion[self.individuo.id] = self.individuo\n            return self.poblacion \n\n        if self.frecuencia_test == 1:\n            testear = dia.isoweekday() in [1, 4]\n        elif self.frecuencia_test == 0:\n            testear = False\n        else:\n            testear = tiempo % self.frecuencia_test == 1\n\n        for ind in poblacion.values():\n            precision_actual_tests = precision_tests['precision']\n            self.individuo = ind\n            \n            if self.individuo.en_trabajo():\n                if self.individuo.sintomatico:\n                    self.individuo.cambiar_estado_observado('infeccioso')\n                elif testear and (self.individuo.estado_observado == 'susceptible'):\n                    self.aplicar_test(precision_actual_tests)\n                    self.asignar_estado_segun_test()\n            elif (self.individuo.tiempo_cuarentena > self.tiempo_pcr) and (self.individuo.estado == 'susceptible'):\n                self.individuo.cambiar_estado_observado('susceptible')\n            elif self.individuo.tiempo_cuarentena > self.duracion_cuarentena:\n                if tiempo >= self.individuo.tiempo_inicio_infeccion + self.individuo.dias_sintomas[1] + self.duracion_cuarentena:\n                    self.individuo.cambiar_estado_observado('recuperado')\n                    \n            self.asignar_actividad()\n            \n        return self.poblacion    \n\nclass AlgoritmoBiosTurnos(AlgoritmoBios):\n    def __init__(self, duracion_cuarentena, frecuencia_test):\n        super().__init__(duracion_cuarentena, frecuencia_test)\n\n        self.turno = 0\n        self.algoritmo_id = 'anticuerpos + turnos'\n\n    def reset(self):\n        super().reset()\n        self.turnos = 0\n\n    def decidir(self, poblacion, tiempo, dia, precision_tests):\n        self.poblacion = poblacion\n        tamano_turno = int(len(self.poblacion) / 2)\n        self.particion_poblacion = [[i for i in self.poblacion if i < tamano_turno], \n                                    [i for i in self.poblacion if i >= tamano_turno]]\n        if tiempo % 14 == 0:\n            self.turno = 1 - self.turno\n            self.poblacion_activa = dict((i, poblacion[i]) for i in self.particion_poblacion[self.turno])\n            self.poblacion_espera = dict((i, poblacion[i]) for i in self.particion_poblacion[1 - self.turno])\n\n        if self.frecuencia_test == 1:\n            testear = dia.isoweekday() in [1, 4]\n        elif self.frecuencia_test == 0:\n            testear = False\n        elif self.frecuencia_test == 15:\n            testear = tiempo % 14 == 8\n        else:\n            testear = tiempo % self.frecuencia_test == 1\n\n        for ind in self.poblacion_activa.values():\n            precision_actual_tests = precision_tests['precision']\n            self.individuo = ind\n            \n            if self.individuo.en_trabajo():\n                if self.individuo.sintomatico:\n                    self.individuo.cambiar_estado_observado('infeccioso')\n                elif testear and (self.individuo.estado_observado == 'susceptible'):\n                    self.aplicar_test(precision_actual_tests)\n                    self.asignar_estado_segun_test()\n            elif (self.individuo.tiempo_cuarentena > self.tiempo_pcr) and (self.individuo.estado == 'susceptible'):\n                self.individuo.cambiar_estado_observado('susceptible')\n            elif self.individuo.tiempo_cuarentena > self.duracion_cuarentena:\n                if tiempo >= self.individuo.tiempo_inicio_infeccion + self.individuo.dias_sintomas[1] + self.duracion_cuarentena:\n                    self.individuo.cambiar_estado_observado('recuperado')\n\n            self.asignar_actividad()\n            self.poblacion[self.individuo.id] = self.individuo\n\n        for ind in self.poblacion_espera.values():\n            self.individuo = ind\n            if self.individuo.sintomatico:\n                self.individuo.cambiar_estado_observado('infeccioso')\n            self.individuo.aplicar_cuarentena()\n            self.poblacion[self.individuo.id] = self.individuo\n\n        return self.poblacion  \n\n\nclass AlgoritmoPCRTurnos(AlgoritmoBios):\n    def __init__(self, duracion_cuarentena, frecuencia_test):\n        super().__init__(duracion_cuarentena, frecuencia_test)\n\n        self.turno = 0\n        self.algoritmo_id = 'anticuerpos + turnos'\n\n    def reset(self):\n        super().reset()\n        self.turnos = 0\n\n    def aplicar_test(self):        \n        self.resultado_test = self.individuo.testear_PCR()\n        self.numero_tests += 1\n\n    def decidir(self, poblacion, tiempo, dia, precision_tests):\n        self.poblacion = poblacion\n        tamano_turno = int(len(self.poblacion) / 2)\n        self.particion_poblacion = [[i for i in self.poblacion if i < tamano_turno], \n                                    [i for i in self.poblacion if i >= tamano_turno]]\n        if tiempo % 14 == 0:\n            self.turno = 1 - self.turno\n            self.poblacion_activa = dict((i, poblacion[i]) for i in self.particion_poblacion[self.turno])\n            self.poblacion_espera = dict((i, poblacion[i]) for i in self.particion_poblacion[1 - self.turno])\n\n        if self.frecuencia_test == 1:\n            testear = dia.isoweekday() in [1, 4]\n        elif self.frecuencia_test == 0:\n            testear = False\n        elif self.frecuencia_test == 15:\n            testear = tiempo % 14 == 7\n        else:\n            testear = tiempo % self.frecuencia_test == 0\n\n        for ind in self.poblacion_activa.values():\n            precision_actual_tests = precision_tests['precision']\n            self.individuo = ind\n            \n            if self.individuo.en_trabajo():\n                if self.individuo.sintomatico:\n                    self.individuo.cambiar_estado_observado('infeccioso')\n                elif testear and (self.individuo.estado_observado == 'susceptible'):\n                    self.aplicar_test()\n                    self.asignar_estado_segun_test()\n            elif (self.individuo.tiempo_cuarentena > self.tiempo_pcr) and (self.individuo.estado == 'susceptible'):\n                self.individuo.cambiar_estado_observado('susceptible')\n            elif self.individuo.tiempo_cuarentena > self.duracion_cuarentena:\n                if tiempo >= self.individuo.tiempo_inicio_infeccion + self.individuo.dias_sintomas[1] + self.duracion_cuarentena:\n                    self.individuo.cambiar_estado_observado('recuperado')\n\n            self.asignar_actividad()\n            self.poblacion[self.individuo.id] = self.individuo\n\n        for ind in self.poblacion_espera.values():\n            self.individuo = ind\n            if self.individuo.sintomatico:\n                self.individuo.cambiar_estado_observado('infeccioso')\n            self.individuo.aplicar_cuarentena()\n            self.poblacion[self.individuo.id] = self.individuo\n\n        return self.poblacion        \n\n\nclass AlgoritmoBiosTurnos2(AlgoritmoBios):\n    def __init__(self, duracion_cuarentena, frecuencia_test):\n        super().__init__(duracion_cuarentena, frecuencia_test)\n\n        self.turno = 0\n        self.algoritmo_id = 'anticuerpos + turnos'\n\n    def reset(self):\n        super().reset()\n        self.turnos = 0\n\n    def decidir(self, poblacion, tiempo, precision_tests):\n        self.poblacion = poblacion\n        if tiempo < self.cuarentena_inicial:\n            for ind in poblacion.values():\n                self.individuo = ind\n                self.individuo.cuarentena_nacional = True\n                self.individuo.aplicar_cuarentena()\n                if self.individuo.sintomatico:\n                    self.individuo.cambiar_estado_observado('infeccioso')\n                self.poblacion[self.individuo.id] = self.individuo\n            return self.poblacion \n\n        tamano_turno = int(len(poblacion) / 2)\n        self.id_particion_poblacion = [[i for i in poblacion if i < tamano_turno], [i for i in poblacion if i >= tamano_turno]]\n\n        if tiempo % 14 == 0:\n            self.turno = 1 - self.turno\n            self.poblacion_activa = dict((i, poblacion[i]) for i in self.id_particion_poblacion[self.turno])\n            self.poblacion_espera = dict((i, poblacion[i]) for i in self.id_particion_poblacion[1 - self.turno])\n\n        for ind in self.poblacion_activa.values():\n            precision_actual_tests = precision_tests['precision'](ind.tiempo_infeccioso, ind.dia_aparicion_ac) \n            self.individuo = ind\n            \n            if self.individuo.en_trabajo():\n                if self.individuo.estado_observado == 'infeccioso':\n                    self.individuo.aplicar_cuarentena()\n                if self.individuo.sintomatico:\n                    self.individuo.cambiar_estado_observado('infeccioso')\n                elif (tiempo % self.frecuencia_test == 0) and (self.individuo.estado_observado == 'susceptible'):\n                    self.aplicar_test(precision_actual_tests)\n                    self.asignar_estado_segun_test()\n            elif (self.individuo.tiempo_cuarentena > self.tiempo_pcr) and (self.individuo.estado == 'susceptible'):\n                self.individuo.cambiar_estado_observado('susceptible')\n            elif self.individuo.tiempo_cuarentena > self.duracion_cuarentena:\n                if tiempo >= self.individuo.tiempo_inicio_infeccion + self.individuo.dias_sintomas[1] + self.duracion_cuarentena:\n                    self.individuo.cambiar_estado_observado('recuperado')\n                else:\n                    self.individuo.aplicar_cuarentena()\n    \n            self.asignar_actividad()\n            self.poblacion[self.individuo.id] = self.individuo\n\n        for ind in self.poblacion_espera.values():\n            self.individuo = ind\n            if self.individuo.sintomatico:\n                self.individuo.cambiar_estado_observado('infeccioso')\n            self.individuo.aplicar_cuarentena()\n            self.poblacion[self.individuo.id] = self.individuo\n\n        return self.poblacion        \n\nclass AlgoritmoHacerNada(AlgoritmoBios):\n    def __init__(self, cuarentena, frecuencia_test):\n        super().__init__(cuarentena, frecuencia_test)\n        self.frecuencia_test = float('nan')\n        self.algoritmo_id = 'hacer nada'\n\nclass AlgoritmoHacerNadaTurnos(AlgoritmoBiosTurnos):\n    def __init__(self, cuarentena, frecuencia_test):\n        super().__init__(cuarentena, frecuencia_test)\n        self.frecuencia_test = float('nan')\n        self.algoritmo_id = 'hacer nada + turnos'\n\nclass AlgoritmoLiteralmenteHacerNada(AlgoritmoBios):\n    def decidir(self, poblacion, tiempo, precision_tests):\n        return poblacion\n\n'''    \n#class AlgoritmoHacerNada:\n    def __init__(self, cuarentena):\n        self.numero_tests = 0\n        self.duracion_cuarentena = cuarentena['duracion']\n        self.cuarentena_inicial = cuarentena['inicial']\n    \n    def decidir(self, poblacion, tiempo, precision_tests):\n        self.poblacion = {}\n        for ind in poblacion.values():\n            self.individuo = ind\n            if self.individuo.en_trabajo():\n                if self.individuo.sintomatico:\n                    self.individuo.cambiar_estado_observado('infeccioso')\n                    self.individuo.aplicar_cuarentena()\n            elif tiempo > self.duracion_cuarentena + self.individuo.dias_sintomas[1] + self.individuo.tiempo_inicio_infeccion:\n                self.individuo.cambiar_estado_observado('recuperado')\n                self.individuo.aplicar_trabajo()\n            \n            self.poblacion[self.individuo.id] = self.individuo\n        return self.poblacion\n    \n    def tick(self):\n        pass\n    \n    def reset(self):\n        self.numero_tests = 0\n#class AlgoritmoHacerNadaTurnos(AlgoritmoHacerNada):\n    def __init__(self, duracion_cuarentena):\n        super().__init__(duracion_cuarentena)\n        self.turno = 0\n\n\n    def reset(self):\n        super().reset()\n        self.turno = 0\n\n    def decidir(self, poblacion, tiempo, precision_tests):\n        tamano_turno = int(len(poblacion) / 2)\n        self.id_particion_poblacion = [[i for i in poblacion if i < tamano_turno], [i for i in poblacion if i >= tamano_turno]]\n\n        if tiempo % 14 == 0:\n            self.turno = 1 - self.turno\n            self.poblacion_activa = dict((i, poblacion[i]) for i in self.id_particion_poblacion[self.turno])\n            self.poblacion_espera = dict((i, poblacion[i]) for i in self.id_particion_poblacion[1 - self.turno])\n\n        self.poblacion = poblacion\n\n        for ind in self.poblacion_activa.values():\n            self.individuo = ind\n            if self.individuo.en_trabajo():\n                if self.individuo.estado_observado == 'infeccioso':\n                    self.individuo.aplicar_cuarentena()\n                if self.individuo.sintomatico:\n                    self.individuo.cambiar_estado_observado('infeccioso')\n                    self.individuo.aplicar_cuarentena()\n            elif tiempo > self.duracion_cuarentena + self.individuo.dias_sintomas[1] + self.individuo.tiempo_inicio_infeccion:\n                self.individuo.cambiar_estado_observado('recuperado')\n                self.individuo.aplicar_trabajo()\n            \n            self.poblacion[self.individuo.id] = self.individuo\n\n        for ind in self.poblacion_espera.values():\n            self.individuo = ind\n            if self.individuo.sintomatico:\n                self.individuo.cambiar_estado_observado('infeccioso')\n            self.individuo.aplicar_cuarentena()\n            self.poblacion[self.individuo.id] = self.individuo\n\n        return self.poblacion\n'''\n\nclass AlgoritmoHacerNadaCerrar:\n    def __init__(self, cuarentena):\n        self.algoritmo_id = 'hacer nada + cerrar'\n        self.tiempo_cuarentena = 0\n        self.cerrado = False\n        self.numero_tests = 0\n        self.duracion_cuarentena = cuarentena['duracion']\n        self.cuarentena_inicial = cuarentena['inicial']\n        \n    def reset(self):\n        self.tiempo_cuarentena = 0\n        self.tiempo = 0\n        self.individuo = None\n        self.cerrado = False\n        self.numero_tests = 0\n        \n    def cerrar(self, poblacion):\n        self.poblacion = poblacion\n        self.cerrado = True\n        for ind in poblacion.values():\n            self.individuo = ind\n            if self.individuo.sintomatico:\n                self.individuo.cambiar_estado_observado('infeccioso')\n            self.individuo.aplicar_cuarentena()\n            self.poblacion[self.individuo.id] = self.individuo\n        return self.poblacion        \n    \n    def abrir(self, poblacion):\n        self.tiempo_cuarentena = 0\n        self.poblacion = {}\n        self.cerrado = False\n        for ind in poblacion.values():\n            self.individuo = ind\n            if not self.individuo.sintomatico:\n                self.individuo.cambiar_estado_observado('susceptible')\n                self.individuo.aplicar_trabajo()                \n            self.poblacion[self.individuo.id] = self.individuo\n        return self.poblacion  \n        \n    def decidir(self, poblacion, tiempo, precision_tests):\n        self.poblacion = poblacion\n        if tiempo < self.cuarentena_inicial:\n            for ind in poblacion.values():\n                self.individuo = ind\n                self.individuo.cuarentena_nacional = True\n                self.individuo.aplicar_cuarentena()\n                if self.individuo.sintomatico:\n                    self.individuo.cambiar_estado_observado('infeccioso')\n                self.poblacion[self.individuo.id] = self.individuo\n            return self.poblacion \n\n        if self.cerrado:\n            self.tiempo_cuarentena += 1\n            if self.tiempo_cuarentena > self.duracion_cuarentena:\n                return self.abrir(poblacion)\n            return self.poblacion\n        for ind in poblacion.values():\n            self.individuo = ind\n            if self.individuo.en_trabajo():\n                if self.individuo.sintomatico:\n                    return self.cerrar(poblacion)\n            elif self.individuo.sintomatico:\n                self.individuo.cambiar_estado_observado('infeccioso')\n            elif tiempo > self.duracion_cuarentena + self.individuo.dias_sintomas[1] + self.individuo.tiempo_inicio_infeccion:\n                    self.individuo.cambiar_estado_observado('recuperado')\n                    self.individuo.aplicar_trabajo()\n                    self.poblacion[self.individuo.id] = self.individuo\n            \n        return self.poblacion\n    \n    def tick(self):\n        pass\n          \n'''\nclass AlgoritmoBiosCerrar(AlgoritmoBios):\n    def __init__(self, duracion_cuarentena, frecuencia_test):\n        super().__init__(duracion_cuarentena, frecuencia_test)\n\n        self.tiempo_cuarentena = 0\n        self.cerrado = False\n\n    def reset(self)\n        self.tiempo_cuarentena = 0\n        self.cerrado = False\n        self.numero_tests = 0\n        self.tiempo = 0\n        self.individuo = None\n        \n\n    def cerrar(self, poblacion):\n        self.poblacion = poblacion\n        self.cerrado = True\n        for ind in poblacion.values():\n            self.individuo = ind\n            if self.individuo.sintomatico:\n                self.individuo.cambiar_estado_observado('infeccioso')\n            self.individuo.aplicar_cuarentena()\n            self.poblacion[self.individuo.id] = self.individuo\n        return self.poblacion        \n    \n    def abrir(self, poblacion):\n        self.tiempo_cuarentena = 0\n        self.poblacion = {}\n        self.cerrado = False\n        for ind in poblacion.values():\n            self.individuo = ind\n            if not self.individuo.sintomatico and self.individuo.tiempo_inicio_infeccion == 0:\n                self.individuo.cambiar_estado_observado('susceptible')\n                self.individuo.aplicar_trabajo()                \n            if self.individuo.tiempo_cuarentena > self.duracion_cuarentena:\n                if tiempo >= self.individuo.tiempo_inicio_infeccion + self.individuo.dias_sintomas[1] + self.duracion_cuarentena:\n                    self.individuo.cambiar_estado_observado('recuperado')\n                    self.individuo.aplicar_trabajo()\n            self.poblacion[self.individuo.id] = self.individuo\n        return self.poblacion  \n\n    def decidir(self, poblacion, tiempo, precision_tests):\n        self.poblacion = poblacion\n        if self.cerrado:\n            self.tiempo_cuarentena =+ 1\n            for ind in poblacion.values():\n                self.individuo = ind\n                if self.individuo.sintomatico:\n                    self.individuo.cambiar_estado_observado('infeccioso')\n            if self.tiempo_cuarentena > self.duracion_cuarentena:\n                return self.abrir(poblacion)\n            return self.poblacion\n\n        for ind in poblacion.values():\n            precision_actual_tests = precision_tests['precision'](ind.tiempo_infeccioso, ind.dia_aparicion_ac) \n            self.individuo = ind\n            \n            if self.individuo.en_trabajo():\n                if self.individuo.sintomatico:\n                    self.individuo.cambiar_estado_observado('infeccioso')\n                    return self.cerrar(poblacion)\n                elif (tiempo % self.frecuencia_test == 0) and (self.individuo.estado_observado == 'susceptible'):\n                    self.aplicar_test(precision_actual_tests)\n                    self.asignar_estado_segun_test()\n                    if self.individuo.estado_observado == 'infeccioso' and self.individuo.estado == 'infeccioso':\n                        return self.cerrar(poblacion)\n            #elif (self.individuo.tiempo_cuarentena > self.tiempo_pcr) and (self.individuo.estado == 'susceptible'):\n             #   self.individuo.cambiar_estado_observado('susceptible')\n            elif self.individuo.tiempo_cuarentena > self.duracion_cuarentena:\n                if tiempo >= self.individuo.tiempo_inicio_infeccion + self.individuo.dias_sintomas[1] + self.duracion_cuarentena:\n                    self.individuo.cambiar_estado_observado('recuperado')\n                    \n            self.asignar_actividad()\n            self.poblacion[self.individuo.id] = self.individuo\n            \n        return self.poblacion    \n'''      \n                \n            \n            \n            \n        \n                \n            \n        ",
			"file": "base/algoritmos.py",
			"file_size": 22268,
			"file_write_time": 132412232683868733,
			"settings":
			{
				"buffer_size": 22265,
				"line_ending": "Unix"
			}
		},
		{
			"file": "simulaciones_eficiente.py",
			"settings":
			{
				"buffer_size": 6618,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "base/simulador.py",
			"settings":
			{
				"buffer_size": 13671,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "base/individuo.py",
			"settings":
			{
				"buffer_size": 8769,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "correr_simulacion.py",
			"settings":
			{
				"buffer_size": 1111,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"contents": "⠤\n▸ .ipynb_checkpoints\\\n▸ __pycache__\\\n▸ datos_graficos_14-04\\\n▸ datos_simulaciones\\\n▸ New folder\\\n▸ Parametros y supuestos simulacion\\\n▸ plots\\\n▸ protocolo-empresas\\\n▸ senama\\\n≡ .RData\n≡ .Rhistory\n≡ algoritmos.py\n≡ correr_simulacion.py\n≡ correr_simulacion_arauco.py\n≡ crear_tabla.R\n≡ documentacion_simulaciones.aux\n≡ documentacion_simulaciones.log\n≡ documentacion_simulaciones.pdf\n≡ documentacion_simulaciones.synctex.gz\n≡ documentacion_simulaciones.tex\n≡ flowchart_simulacion.pdf\n≡ flowchart_simulacion.pptx\n≡ flowchart_simulacion_en.pdf\n≡ GB prouesta Ac-Covid.pptx\n≡ individuo.py\n≡ individuo_test.ipynb\n≡ Paper screening covid 95%.docx\n≡ probabilidades_condicionales_escenarios.R\n≡ senama_pcr_probabilidad_infeccion.R\n≡ senama_probabilidad_infeccion.R\n≡ senama_r0_probabilidad_infeccion.R\n≡ simulaciones_algoritmo_bios.py\n≡ simulaciones_arauco.py\n≡ simulaciones_eficiente.py\n≡ simulaciones_protocolo_covid.sublime-project\n≡ simulaciones_protocolo_covid.sublime-workspace\n≡ simulaciones_v2.py\n≡ simulaciones_v3.py\n≡ simulador.py\n≡ tabla_con_cuarentena.png\n≡ tabla_infecciosos_trabajando.png\n≡ tabla_r0=2.png\n≡ tabla_sumario.png\n≡ TEST_DESVSTD.csv\n≡ transformar_datos.R\n≡ visualizar_simulaciones.R\n≡ visualizar_simulaciones_2.R\n≡ visualizar_simulaciones_3.R\n≡ visualizar_simulaciones_arauco.R\n≡ visualizar_simulaciones_v2.R\n≡ visualizar_simulaciones_v2_2.R\n≡ visualizar_simulaciones_v3.R",
			"settings":
			{
				"buffer_size": 1388,
				"line_ending": "Windows",
				"name": "𝌆 simulaciones_protocolo",
				"read_only": true,
				"scratch": true
			}
		}
	],
	"build_system": "Packages/Python/Python.sublime-build",
	"build_system_choices":
	[
		[
			[
				[
					"Packages/Python/Python.sublime-build",
					""
				],
				[
					"Packages/Python/Python.sublime-build",
					"Syntax Check"
				]
			],
			[
				"Packages/Python/Python.sublime-build",
				""
			]
		]
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 392.0,
		"last_filter": "colo",
		"selected_items":
		[
			[
				"colo",
				"UI: Select Color Scheme"
			],
			[
				"remove",
				"Package Control: Remove Package"
			],
			[
				"build",
				"Build With: Python"
			],
			[
				"buildvi",
				"Disable/Enable buildview for this window"
			],
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"insta",
				"Package Control: Install Package"
			],
			[
				"brow",
				"Browse Mode: Current file or project"
			],
			[
				"col",
				"UI: Select Color Scheme"
			],
			[
				"color",
				"UI: Select Color Scheme"
			],
			[
				"rep",
				"SublimeREPL: Python"
			],
			[
				"setting",
				"Preferences: Settings"
			],
			[
				"ipyh",
				"SublimeREPL: Python - IPython"
			],
			[
				"setti",
				"Preferences: Settings"
			],
			[
				"sett",
				"Preferences: Settings"
			],
			[
				"settin",
				"Preferences: Settings"
			],
			[
				"ipyt",
				"SublimeREPL: Python - IPython"
			],
			[
				"python",
				"SublimeREPL: Python"
			],
			[
				"ipyth",
				"SublimeREPL: Python - IPython"
			],
			[
				"replipy",
				"SublimeREPL: Python - IPython"
			],
			[
				"shel",
				"Set Syntax: Haskell"
			],
			[
				"repl",
				"SublimeREPL: Python"
			],
			[
				"replip",
				"SublimeREPL: Python - IPython"
			],
			[
				"sehll",
				"SublimeREPL: Shell"
			],
			[
				"key",
				"Preferences: Terminus Key Bindings"
			],
			[
				"instal",
				"Package Control: Install Package"
			],
			[
				"add re",
				"Package Control: Add Repository"
			],
			[
				"control",
				"Package Control: List Packages"
			],
			[
				"package control sa",
				"Package Control: Satisfy Dependencies"
			],
			[
				"repl:py",
				"SublimeREPL: Python"
			],
			[
				"repl:python",
				"SublimeREPL: Python - IPython"
			],
			[
				"sublimerepl:py",
				"SublimeREPL: Python - Sublime Text Console"
			],
			[
				"packages",
				"Package Control: List Packages"
			],
			[
				"select c",
				"UI: Select Color Scheme"
			],
			[
				"select color ",
				"UI: Select Color Scheme"
			],
			[
				"select ",
				"UI: Select Color Scheme"
			]
		],
		"width": 412.0
	},
	"console":
	{
		"height": 250.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"file_history":
	[
		"/C/Users/Patricio Foncea/Dropbox (MIT)/CORONAVIRUS/Protocolo de Empresas/simulaciones_protocolo/protocolo-empresas/ccu2/base/algoritmos.py",
		"/C/Users/Patricio Foncea/Dropbox (MIT)/CORONAVIRUS/Protocolo de Empresas/simulaciones_protocolo/protocolo-empresas/base/seir/simulador.py",
		"/C/Users/Patricio Foncea/Dropbox (MIT)/CORONAVIRUS/Protocolo de Empresas/simulaciones_protocolo/protocolo-empresas/base/seir/algoritmos.py",
		"/C/Users/Patricio Foncea/Dropbox (MIT)/CORONAVIRUS/Protocolo de Empresas/simulaciones_protocolo/protocolo-empresas/codelco/correr_simulacion.py",
		"/C/Users/Patricio Foncea/Dropbox (MIT)/CORONAVIRUS/Protocolo de Empresas/simulaciones_protocolo/protocolo-empresas/codelco/simulaciones_eficiente.py",
		"/C/Users/Patricio Foncea/Dropbox (MIT)/CORONAVIRUS/Protocolo de Empresas/simulaciones_protocolo/protocolo-empresas/codelco/base/algoritmos.py",
		"/C/Users/Patricio Foncea/Dropbox (MIT)/CORONAVIRUS/Protocolo de Empresas/simulaciones_protocolo/protocolo-empresas/ccu2/base/simulador.py",
		"/C/Users/Patricio Foncea/Dropbox (MIT)/CORONAVIRUS/Protocolo de Empresas/simulaciones_protocolo/protocolo-empresas/base/seir/individuo.py",
		"/C/Users/Patricio Foncea/Dropbox (MIT)/CORONAVIRUS/Protocolo de Empresas/simulaciones_protocolo/protocolo-empresas/codelco/base/simulador.py",
		"/C/Users/Patricio Foncea/Dropbox (MIT)/CORONAVIRUS/Protocolo de Empresas/simulaciones_protocolo/protocolo-empresas/ccu2/base/individuo.py",
		"/C/Users/Patricio Foncea/Dropbox (MIT)/CORONAVIRUS/Protocolo de Empresas/simulaciones_protocolo/protocolo-empresas/codelco/base/individuo.py",
		"/C/Users/Patricio Foncea/Dropbox (MIT)/CORONAVIRUS/Protocolo de Empresas/simulaciones_protocolo/protocolo-empresas/ccu2/simulaciones_eficiente.py",
		"/C/Users/Patricio Foncea/Dropbox (MIT)/CORONAVIRUS/Protocolo de Empresas/simulaciones_protocolo/protocolo-empresas/sensitivy_analysis/correr_simulacion.py",
		"/C/Users/Patricio Foncea/Dropbox (MIT)/CORONAVIRUS/Protocolo de Empresas/simulaciones_protocolo/protocolo-empresas/ccu2/correr_simulacion.py",
		"/C/Users/Patricio Foncea/Dropbox (MIT)/CORONAVIRUS/Protocolo de Empresas/simulaciones_protocolo/protocolo-empresas/ccu/correr_simulacion.py",
		"/C/Users/Patricio Foncea/Dropbox (MIT)/CORONAVIRUS/Protocolo de Empresas/simulaciones_protocolo/protocolo-empresas/ccu/base/simulador.py",
		"/C/Users/Patricio Foncea/Dropbox (MIT)/CORONAVIRUS/Protocolo de Empresas/simulaciones_protocolo/protocolo-empresas/ccu/base/individuo.py",
		"/C/Users/Patricio Foncea/Dropbox (MIT)/CORONAVIRUS/Protocolo de Empresas/simulaciones_protocolo/protocolo-empresas/ccu/base/algoritmos.py",
		"/C/Users/Patricio Foncea/Dropbox (MIT)/CORONAVIRUS/Protocolo de Empresas/simulaciones_protocolo/protocolo-empresas/ccu/simulaciones_eficiente.py",
		"/C/Users/Patricio Foncea/Dropbox (MIT)/CORONAVIRUS/Protocolo de Empresas/simulaciones_protocolo/protocolo-empresas/sensitivy_analysis/algoritmos_sens.py",
		"/C/Users/Patricio Foncea/Dropbox (MIT)/CORONAVIRUS/Protocolo de Empresas/simulaciones_protocolo/protocolo-empresas/sensitivy_analysis/individuo_sens.py",
		"/C/Users/Patricio Foncea/.jupyter/nbconfig/notebook.json",
		"/C/Users/Patricio Foncea/.jupyter/jupyter_notebook_config.py",
		"/C/Users/Patricio Foncea/Dropbox (MIT)/CORONAVIRUS/Protocolo de Empresas/simulaciones_protocolo/protocolo-empresas/sanpedro/correr_simulacion.py",
		"/C/Users/Patricio Foncea/Dropbox (MIT)/CORONAVIRUS/Protocolo de Empresas/simulaciones_protocolo/protocolo-empresas/ccu/base/__init__.py",
		"/C/Users/Patricio Foncea/Dropbox (MIT)/CORONAVIRUS/Protocolo de Empresas/simulaciones_protocolo/protocolo-empresas/sensitivy_analysis/simulaciones_eficiente.py",
		"/C/Users/Patricio Foncea/Dropbox (MIT)/CORONAVIRUS/Protocolo de Empresas/simulaciones_protocolo/protocolo-empresas/simulaciones_eficiente.py",
		"/C/Users/Patricio Foncea/Dropbox (MIT)/CORONAVIRUS/Protocolo de Empresas/simulaciones_protocolo/protocolo-empresas/correr_simulacion.py",
		"/C/Users/Patricio Foncea/Dropbox (MIT)/CORONAVIRUS/Protocolo de Empresas/simulaciones_protocolo/protocolo-empresas/sensitivy_analysis/simulador_sens.py",
		"/C/Users/Patricio Foncea/Dropbox (MIT)/CORONAVIRUS/Protocolo de Empresas/simulaciones_protocolo/protocolo-empresas/seir/correr_seir.py",
		"/C/Users/Patricio Foncea/Dropbox (MIT)/CORONAVIRUS/Protocolo de Empresas/simulaciones_protocolo/protocolo-empresas/sanpedro/base/individuo_sp.py",
		"/C/Users/Patricio Foncea/Dropbox (MIT)/CORONAVIRUS/Protocolo de Empresas/simulaciones_protocolo/protocolo-empresas/sanpedro/base/algoritmos.py",
		"/C/Users/Patricio Foncea/Dropbox (MIT)/CORONAVIRUS/Protocolo de Empresas/simulaciones_protocolo/protocolo-empresas/base/seir/simulador_ex.py",
		"/C/Users/Patricio Foncea/Dropbox (MIT)/CORONAVIRUS/Protocolo de Empresas/simulaciones_protocolo/protocolo-empresas/seir/seir.py",
		"/C/Users/Patricio Foncea/Dropbox (MIT)/CORONAVIRUS/Protocolo de Empresas/simulaciones_protocolo/protocolo-empresas/seir/simulaciones_seir.py",
		"/C/Users/Patricio Foncea/Dropbox (MIT)/CORONAVIRUS/Protocolo de Empresas/simulaciones_protocolo/protocolo-empresas/sanpedro/simulaciones_eficiente.py",
		"/C/Users/Patricio Foncea/Dropbox (MIT)/CORONAVIRUS/Protocolo de Empresas/simulaciones_protocolo/protocolo-empresas/sanpedro/base/simulador_sp.py",
		"/C/Users/Patricio Foncea/Dropbox (MIT)/CORONAVIRUS/Protocolo de Empresas/simulaciones_protocolo/protocolo-empresas/seir/simulador_seir.py",
		"/C/Users/Patricio Foncea/Dropbox (MIT)/CORONAVIRUS/Protocolo de Empresas/simulaciones_protocolo/protocolo-empresas/seir/individuo_seir.py",
		"/D/Games/Wizards of the Coast/MTGA/version",
		"/C/Users/Patricio Foncea/Dropbox (MIT)/CORONAVIRUS/Protocolo de Empresas/simulaciones_protocolo/protocolo-empresas/sanpedro/individuo_sp.py",
		"/C/Users/Patricio Foncea/Dropbox (MIT)/CORONAVIRUS/Protocolo de Empresas/simulaciones_protocolo/protocolo-empresas/sanpedro/simulador_sp.py",
		"/C/Users/Patricio Foncea/Dropbox (MIT)/CORONAVIRUS/Protocolo de Empresas/simulaciones_protocolo/protocolo-empresas/sanpedro/simulador.py",
		"/C/Users/Patricio Foncea/Dropbox (MIT)/CORONAVIRUS/Protocolo de Empresas/simulaciones_protocolo/protocolo-empresas/sanpedro/individuo.py",
		"/C/Users/Patricio Foncea/Dropbox (MIT)/CORONAVIRUS/Protocolo de Empresas/simulaciones_protocolo/protocolo-empresas/sanpedro/algoritmos.py",
		"/C/Users/Patricio Foncea/Dropbox (MIT)/CORONAVIRUS/Protocolo de Empresas/simulaciones_protocolo/protocolo-empresas/sanpedro/simulador_ex.py",
		"/C/Users/Patricio Foncea/Dropbox (MIT)/covid19_policy_alliance/covid-demand-buoy/scripts/risk_score/risk_buoy.py",
		"/C/Users/Patricio Foncea/Dropbox (MIT)/covid19_policy_alliance/covid-demand-buoy/scripts/risk_score/get_data.py",
		"/C/Users/Patricio Foncea/Dropbox (MIT)/covid19_policy_alliance/covid-demand-buoy/scripts/risk_score/risk_buoy_county2.py",
		"/C/Users/Patricio Foncea/Dropbox (MIT)/covid19_policy_alliance/covid-demand-buoy/scripts/risk_score/risk_buoy_county.py",
		"/C/Users/Patricio Foncea/Dropbox (MIT)/CORONAVIRUS/Protocolo de Empresas/simulaciones_protocolo/datos_simulaciones/resultados_HacerNada_frec=0_pob=20_cinic=0_r0=3_pi=0.0075_iter=5_30-04.csv",
		"/C/Users/Patricio Foncea/Dropbox (MIT)/CORONAVIRUS/Protocolo de Empresas/simulaciones_protocolo/datos_simulaciones/resultados_HacerNadaTurnos_frec=0_pob=20_cinic=0_r0=2.5_pi=0.0075_iter=5_30-04.csv",
		"/C/Users/Patricio Foncea/Dropbox (MIT)/CORONAVIRUS/Protocolo de Empresas/simulaciones_protocolo/datos_simulaciones/numero_tests_HacerNada_frec=0_pob=100_cinic=0_r0=3_pi=0.01_iter=100_30-04.csv",
		"/C/Users/Patricio Foncea/Dropbox (MIT)/CORONAVIRUS/Protocolo de Empresas/simulaciones_protocolo/datos_simulaciones/numero_tests_HacerNada_frec=0_pob=100_cinic=0_r0=3_pi=0.01_iter=500_30-04.csv",
		"/C/Users/Patricio Foncea/Dropbox (MIT)/CORONAVIRUS/Protocolo de Empresas/simulaciones_protocolo/datos_simulaciones/numero_tests_HacerNada_frec=0_pob=100_cinic=0_r0=3_pi=0.01_iter=3000_30-04.csv",
		"/C/Users/Patricio Foncea/Dropbox (MIT)/CORONAVIRUS/Protocolo de Empresas/simulaciones_protocolo/datos_simulaciones/numero_tests_HacerNada_frec=0_pob=100_cinic=0_r0=3_pi=0.0075_iter=3000_30-04.csv",
		"/C/Users/Patricio Foncea/Dropbox (MIT)/CORONAVIRUS/Protocolo de Empresas/simulaciones_protocolo/datos_simulaciones/numero_tests_HacerNada_frec=0_pob=100_cinic=0_r0=6.5_pi=0.01_iter=100_30-04.csv",
		"/C/Users/Patricio Foncea/Dropbox (MIT)/CORONAVIRUS/Protocolo de Empresas/simulaciones_protocolo/datos_simulaciones/numero_tests_HacerNadaTurnos_frec=0_pob=20_cinic=0_r0=2.5_pi=0.0075_iter=5_30-04.csv",
		"/C/Users/Patricio Foncea/Dropbox (MIT)/CORONAVIRUS/Protocolo de Empresas/simulaciones_protocolo/datos_simulaciones/numero_tests_HacerNadaTurnos_frec=0_pob=20_cinic=0_r0=2.5_pi=0.0075_iter=5000_30-04.csv",
		"/C/Users/Patricio Foncea/Dropbox (MIT)/CORONAVIRUS/Protocolo de Empresas/simulaciones_protocolo/datos_simulaciones/numero_tests_HacerNadaTurnos_frec=0_pob=20_cinic=0_r0=3_pi=0.0075_iter=5_30-04.csv",
		"/C/Users/Patricio Foncea/Dropbox (MIT)/CORONAVIRUS/Protocolo de Empresas/simulaciones_protocolo/datos_simulaciones/numero_tests_HacerNadaTurnos_frec=0_pob=20_cinic=0_r0=3_pi=0.0075_iter=5000_30-04.csv",
		"/C/Users/Patricio Foncea/Dropbox (MIT)/CORONAVIRUS/Protocolo de Empresas/simulaciones_protocolo/datos_simulaciones/numero_tests_HacerNadaTurnos_frec=0_pob=100_cinic=0_r0=3_pi=0.01_iter=100_30-04.csv",
		"/C/Users/Patricio Foncea/Dropbox (MIT)/CORONAVIRUS/Protocolo de Empresas/simulaciones_protocolo/datos_simulaciones/numero_tests_HacerNadaTurnos_frec=0_pob=100_cinic=0_r0=3_pi=0.01_iter=500_30-04.csv",
		"/C/Users/Patricio Foncea/Dropbox (MIT)/CORONAVIRUS/Protocolo de Empresas/simulaciones_protocolo/datos_simulaciones/numero_tests_HacerNadaTurnos_frec=0_pob=100_cinic=0_r0=3_pi=0.01_iter=3000_30-04.csv",
		"/C/Users/Patricio Foncea/Dropbox (MIT)/CORONAVIRUS/Protocolo de Empresas/simulaciones_protocolo/datos_simulaciones/numero_tests_HacerNadaTurnos_frec=0_pob=100_cinic=0_r0=3_pi=0.0075_iter=3000_30-04.csv",
		"/C/Users/Patricio Foncea/Dropbox (MIT)/CORONAVIRUS/Protocolo de Empresas/simulaciones_protocolo/datos_simulaciones/numero_tests_HacerNadaTurnos_frec=0_pob=100_cinic=0_r0=6.5_pi=0.01_iter=100_30-04.csv",
		"/C/Users/Patricio Foncea/Dropbox (MIT)/CORONAVIRUS/Protocolo de Empresas/simulaciones_protocolo/datos_simulaciones/resultados_Bios_frec=3_pob=20_cinic=0_r0=1.5_pi=0.0075_iter=30_28-04.csv",
		"/C/Users/Patricio Foncea/Dropbox (MIT)/CORONAVIRUS/Protocolo de Empresas/simulaciones_protocolo/datos_simulaciones/resultados_Bios_frec=3_pob=20_cinic=0_r0=2.5_pi=0.0075_iter=5_30-04.csv",
		"/C/Users/Patricio Foncea/Dropbox (MIT)/CORONAVIRUS/Protocolo de Empresas/simulaciones_protocolo/datos_simulaciones/resultados_Bios_frec=3_pob=20_cinic=0_r0=2.5_pi=0.0075_iter=5000_30-04.csv",
		"/C/Users/Patricio Foncea/Dropbox (MIT)/CORONAVIRUS/Protocolo de Empresas/simulaciones_protocolo/datos_simulaciones/resultados_HacerNadaTurnos_frec=0_pob=20_cinic=0_r0=3_pi=0.0075_iter=5_30-04.csv",
		"/C/Users/Patricio Foncea/Dropbox (MIT)/CORONAVIRUS/Protocolo de Empresas/simulaciones_protocolo/datos_simulaciones/resultados_HacerNadaTurnos_frec=0_pob=100_cinic=0_r0=6.5_pi=0.01_iter=100_30-04.csv",
		"/C/Users/Patricio Foncea/Dropbox (MIT)/covid19_policy_alliance/covid-demand-buoy/scripts/risk_score/simple_model.ipynb",
		"/C/Users/Patricio Foncea/Dropbox (MIT)/CORONAVIRUS/Protocolo de Empresas/simulaciones_protocolo/senama/correr_simulacion.py",
		"/C/Users/Patricio Foncea/Dropbox (MIT)/CORONAVIRUS/Protocolo de Empresas/simulaciones_protocolo/protocolo-empresas/protocolo-empresa.sublime-project",
		"/C/Users/Patricio Foncea/Dropbox (MIT)/CORONAVIRUS/Protocolo de Empresas/simulaciones_protocolo/protocolo-empresas/protocolo-empresa.sublime-workspace",
		"/C/Users/Patricio Foncea/Dropbox (MIT)/CORONAVIRUS/Protocolo de Empresas/simulaciones_protocolo/senama/simulador.py",
		"/C/Users/Patricio Foncea/Dropbox (MIT)/CORONAVIRUS/Protocolo de Empresas/simulaciones_protocolo/algoritmos.py",
		"/C/Users/Patricio Foncea/AppData/Roaming/Sublime Text 3/Packages/SublimeREPL/config/Python/ipy_repl.py",
		"/C/Users/Patricio Foncea/Dropbox (MIT)/CORONAVIRUS/Protocolo de Empresas/simulaciones_protocolo/individuo.py",
		"/C/Users/Patricio Foncea/AppData/Roaming/Sublime Text 3/Packages/User/SublimeREPL.sublime-settings",
		"/C/Users/Patricio Foncea/AppData/Roaming/Sublime Text 3/Packages/SublimeREPL/SublimeREPL.sublime-settings",
		"/C/Users/Patricio Foncea/Dropbox (MIT)/CORONAVIRUS/Protocolo de Empresas/simulaciones_protocolo/simulaciones_protocolo_covid.sublime-project",
		"/C/Users/Patricio Foncea/Dropbox (MIT)/CORONAVIRUS/Protocolo de Empresas/simulaciones_protocolo/simulaciones_protocolo_covid.sublime-workspace",
		"/C/Users/Patricio Foncea/AppData/Roaming/Sublime Text 3/Packages/User/dired.sublime-settings",
		"/C/Users/Patricio Foncea/AppData/Roaming/Sublime Text 3/Packages/FileBrowser/dired.sublime-settings",
		"/C/Users/Patricio Foncea/Dropbox (MIT)/covid19_policy_alliance/epi_models/seir.py",
		"/C/Users/Patricio Foncea/AppData/Roaming/Sublime Text 3/Packages/Default/Preferences.sublime-settings",
		"/C/Users/Patricio Foncea/Dropbox (MIT)/covid19_policy_alliance/demand-modeling/fatality_model/validation_death_predictor.py",
		"/C/Users/Patricio Foncea/Dropbox (MIT)/covid19_policy_alliance/demand-modeling/fatality_model/linear_death_predictor.py",
		"/C/Users/Patricio Foncea/AppData/Roaming/Sublime Text 3/Packages/User/Preferences.sublime-settings",
		"/C/Users/Patricio Foncea/Dropbox (MIT)/covid19_policy_alliance/local/test_dummy_death_predictor.ipynb",
		"/C/Users/Patricio Foncea/Dropbox (MIT)/covid19_policy_alliance/local/dummy_death_predictor.py",
		"/C/Users/Patricio Foncea/Dropbox (MIT)/covid19_policy_alliance/local/test_dummy_death_predictor.py",
		"/C/Users/Patricio Foncea/AppData/Roaming/Sublime Text 3/Packages/Package Control/Package Control.sublime-settings",
		"/C/Users/Patricio Foncea/AppData/Roaming/Sublime Text 3/Packages/User/Package Control.sublime-settings",
		"/C/Users/Patricio Foncea/AppData/Roaming/Sublime Text 3/Installed Packages/Solarized Color Scheme.sublime-package",
		"/C/Users/Patricio Foncea/AppData/Roaming/Sublime Text 3/Installed Packages/Package Control.sublime-package",
		"/C/Users/Patricio Foncea/Dropbox (MIT)/CoronaVirus/CoronaVirus/visualization/Visualization_TP/processing_assignment.py",
		"/C/Users/Patricio Foncea/Dropbox (MIT)/CoronaVirus/CoronaVirus/experiments_hospital.py",
		"/C/Users/Patricio Foncea/Dropbox (MIT)/CoronaVirus/CoronaVirus/experiment_parameters.py",
		"/C/Users/Patricio Foncea/Dropbox (MIT)/CoronaVirus/CoronaVirus/pipeline.py",
		"/C/Users/Patricio Foncea/Dropbox (MIT)/CoronaVirus/CoronaVirus/structures.py",
		"/C/Users/Patricio Foncea/Dropbox (MIT)/CoronaVirus/CoronaVirus/test_routing_lp_copy.py",
		"/C/Users/Patricio Foncea/Dropbox (MIT)/CoronaVirus/CoronaVirus/simulator_copy.py",
		"/C/Users/Patricio Foncea/Dropbox (MIT)/CoronaVirus/CoronaVirus/visualization/Visualization_TP/processing_assignment_naive.py",
		"/C/Users/Patricio Foncea/Dropbox (MIT)/CoronaVirus/CoronaVirus/test_routing_lp.py",
		"/C/Users/Patricio Foncea/Dropbox (MIT)/CoronaVirus/CoronaVirus/random_close_simulator.py",
		"/C/Users/Patricio Foncea/Dropbox (MIT)/CoronaVirus/CoronaVirus/test_routing_lp - Copy.py",
		"/C/Users/Patricio Foncea/AppData/Local/Programs/Python/Python37/Lib/site-packages/biogeme/models.py",
		"/C/Users/Patricio Foncea/AppData/Local/Programs/Python/Python37/Lib/site-packages/biogeme/biogeme.py",
		"/C/Users/Patricio Foncea/AppData/Local/Programs/Python/Python37/Lib/site-packages/biogeme/biogemebackup.py",
		"/C/Users/Patricio Foncea/Dropbox (MIT)/PhD/Industry Project/2019 ABI/BIOGEME/01logit.py",
		"/C/Users/Patricio Foncea/Dropbox (MIT)/CoronaVirus/test_routing_lp.py",
		"/C/Users/Patricio Foncea/AppData/Local/Programs/Python/Python37/Lib/site-packages/biogeme/__pycache__/loglikelihood.cpython-37.pyc"
	],
	"find":
	{
		"height": 40.0
	},
	"find_in_files":
	{
		"height": 0.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"drop",
			"browser",
			"_G",
			"indent",
			"close",
			"close-window",
			"minimap",
			"history"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"_M",
			""
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 0,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "base/algoritmos.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 22265,
						"regions":
						{
						},
						"selection":
						[
							[
								7421,
								7421
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1841.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "simulaciones_eficiente.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6618,
						"regions":
						{
						},
						"selection":
						[
							[
								2002,
								2002
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 306.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				}
			]
		},
		{
			"selected": 1,
			"sheets":
			[
				{
					"buffer": 2,
					"file": "base/simulador.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 13671,
						"regions":
						{
						},
						"selection":
						[
							[
								1420,
								1420
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 105.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "base/individuo.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 8769,
						"regions":
						{
						},
						"selection":
						[
							[
								1571,
								1571
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 50.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				}
			]
		},
		{
			"selected": 0,
			"sheets":
			[
				{
					"buffer": 4,
					"file": "correr_simulacion.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1111,
						"regions":
						{
						},
						"selection":
						[
							[
								375,
								375
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				}
			]
		},
		{
			"selected": 0,
			"sheets":
			[
				{
					"buffer": 5,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1388,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"color_scheme": "Packages/FileBrowser/dired.hidden-tmTheme",
							"dired_count": 52,
							"dired_index":
							[
								"⠤",
								"C:\\Users\\Patricio Foncea\\Dropbox (MIT)\\CORONAVIRUS\\Protocolo de Empresas\\simulaciones_protocolo\\.ipynb_checkpoints\\",
								"C:\\Users\\Patricio Foncea\\Dropbox (MIT)\\CORONAVIRUS\\Protocolo de Empresas\\simulaciones_protocolo\\__pycache__\\",
								"C:\\Users\\Patricio Foncea\\Dropbox (MIT)\\CORONAVIRUS\\Protocolo de Empresas\\simulaciones_protocolo\\datos_graficos_14-04\\",
								"C:\\Users\\Patricio Foncea\\Dropbox (MIT)\\CORONAVIRUS\\Protocolo de Empresas\\simulaciones_protocolo\\datos_simulaciones\\",
								"C:\\Users\\Patricio Foncea\\Dropbox (MIT)\\CORONAVIRUS\\Protocolo de Empresas\\simulaciones_protocolo\\New folder\\",
								"C:\\Users\\Patricio Foncea\\Dropbox (MIT)\\CORONAVIRUS\\Protocolo de Empresas\\simulaciones_protocolo\\Parametros y supuestos simulacion\\",
								"C:\\Users\\Patricio Foncea\\Dropbox (MIT)\\CORONAVIRUS\\Protocolo de Empresas\\simulaciones_protocolo\\plots\\",
								"C:\\Users\\Patricio Foncea\\Dropbox (MIT)\\CORONAVIRUS\\Protocolo de Empresas\\simulaciones_protocolo\\protocolo-empresas\\",
								"C:\\Users\\Patricio Foncea\\Dropbox (MIT)\\CORONAVIRUS\\Protocolo de Empresas\\simulaciones_protocolo\\senama\\",
								"C:\\Users\\Patricio Foncea\\Dropbox (MIT)\\CORONAVIRUS\\Protocolo de Empresas\\simulaciones_protocolo\\.RData",
								"C:\\Users\\Patricio Foncea\\Dropbox (MIT)\\CORONAVIRUS\\Protocolo de Empresas\\simulaciones_protocolo\\.Rhistory",
								"C:\\Users\\Patricio Foncea\\Dropbox (MIT)\\CORONAVIRUS\\Protocolo de Empresas\\simulaciones_protocolo\\algoritmos.py",
								"C:\\Users\\Patricio Foncea\\Dropbox (MIT)\\CORONAVIRUS\\Protocolo de Empresas\\simulaciones_protocolo\\correr_simulacion.py",
								"C:\\Users\\Patricio Foncea\\Dropbox (MIT)\\CORONAVIRUS\\Protocolo de Empresas\\simulaciones_protocolo\\correr_simulacion_arauco.py",
								"C:\\Users\\Patricio Foncea\\Dropbox (MIT)\\CORONAVIRUS\\Protocolo de Empresas\\simulaciones_protocolo\\crear_tabla.R",
								"C:\\Users\\Patricio Foncea\\Dropbox (MIT)\\CORONAVIRUS\\Protocolo de Empresas\\simulaciones_protocolo\\documentacion_simulaciones.aux",
								"C:\\Users\\Patricio Foncea\\Dropbox (MIT)\\CORONAVIRUS\\Protocolo de Empresas\\simulaciones_protocolo\\documentacion_simulaciones.log",
								"C:\\Users\\Patricio Foncea\\Dropbox (MIT)\\CORONAVIRUS\\Protocolo de Empresas\\simulaciones_protocolo\\documentacion_simulaciones.pdf",
								"C:\\Users\\Patricio Foncea\\Dropbox (MIT)\\CORONAVIRUS\\Protocolo de Empresas\\simulaciones_protocolo\\documentacion_simulaciones.synctex.gz",
								"C:\\Users\\Patricio Foncea\\Dropbox (MIT)\\CORONAVIRUS\\Protocolo de Empresas\\simulaciones_protocolo\\documentacion_simulaciones.tex",
								"C:\\Users\\Patricio Foncea\\Dropbox (MIT)\\CORONAVIRUS\\Protocolo de Empresas\\simulaciones_protocolo\\flowchart_simulacion.pdf",
								"C:\\Users\\Patricio Foncea\\Dropbox (MIT)\\CORONAVIRUS\\Protocolo de Empresas\\simulaciones_protocolo\\flowchart_simulacion.pptx",
								"C:\\Users\\Patricio Foncea\\Dropbox (MIT)\\CORONAVIRUS\\Protocolo de Empresas\\simulaciones_protocolo\\flowchart_simulacion_en.pdf",
								"C:\\Users\\Patricio Foncea\\Dropbox (MIT)\\CORONAVIRUS\\Protocolo de Empresas\\simulaciones_protocolo\\GB prouesta Ac-Covid.pptx",
								"C:\\Users\\Patricio Foncea\\Dropbox (MIT)\\CORONAVIRUS\\Protocolo de Empresas\\simulaciones_protocolo\\individuo.py",
								"C:\\Users\\Patricio Foncea\\Dropbox (MIT)\\CORONAVIRUS\\Protocolo de Empresas\\simulaciones_protocolo\\individuo_test.ipynb",
								"C:\\Users\\Patricio Foncea\\Dropbox (MIT)\\CORONAVIRUS\\Protocolo de Empresas\\simulaciones_protocolo\\Paper screening covid 95%.docx",
								"C:\\Users\\Patricio Foncea\\Dropbox (MIT)\\CORONAVIRUS\\Protocolo de Empresas\\simulaciones_protocolo\\probabilidades_condicionales_escenarios.R",
								"C:\\Users\\Patricio Foncea\\Dropbox (MIT)\\CORONAVIRUS\\Protocolo de Empresas\\simulaciones_protocolo\\senama_pcr_probabilidad_infeccion.R",
								"C:\\Users\\Patricio Foncea\\Dropbox (MIT)\\CORONAVIRUS\\Protocolo de Empresas\\simulaciones_protocolo\\senama_probabilidad_infeccion.R",
								"C:\\Users\\Patricio Foncea\\Dropbox (MIT)\\CORONAVIRUS\\Protocolo de Empresas\\simulaciones_protocolo\\senama_r0_probabilidad_infeccion.R",
								"C:\\Users\\Patricio Foncea\\Dropbox (MIT)\\CORONAVIRUS\\Protocolo de Empresas\\simulaciones_protocolo\\simulaciones_algoritmo_bios.py",
								"C:\\Users\\Patricio Foncea\\Dropbox (MIT)\\CORONAVIRUS\\Protocolo de Empresas\\simulaciones_protocolo\\simulaciones_arauco.py",
								"C:\\Users\\Patricio Foncea\\Dropbox (MIT)\\CORONAVIRUS\\Protocolo de Empresas\\simulaciones_protocolo\\simulaciones_eficiente.py",
								"C:\\Users\\Patricio Foncea\\Dropbox (MIT)\\CORONAVIRUS\\Protocolo de Empresas\\simulaciones_protocolo\\simulaciones_protocolo_covid.sublime-project",
								"C:\\Users\\Patricio Foncea\\Dropbox (MIT)\\CORONAVIRUS\\Protocolo de Empresas\\simulaciones_protocolo\\simulaciones_protocolo_covid.sublime-workspace",
								"C:\\Users\\Patricio Foncea\\Dropbox (MIT)\\CORONAVIRUS\\Protocolo de Empresas\\simulaciones_protocolo\\simulaciones_v2.py",
								"C:\\Users\\Patricio Foncea\\Dropbox (MIT)\\CORONAVIRUS\\Protocolo de Empresas\\simulaciones_protocolo\\simulaciones_v3.py",
								"C:\\Users\\Patricio Foncea\\Dropbox (MIT)\\CORONAVIRUS\\Protocolo de Empresas\\simulaciones_protocolo\\simulador.py",
								"C:\\Users\\Patricio Foncea\\Dropbox (MIT)\\CORONAVIRUS\\Protocolo de Empresas\\simulaciones_protocolo\\tabla_con_cuarentena.png",
								"C:\\Users\\Patricio Foncea\\Dropbox (MIT)\\CORONAVIRUS\\Protocolo de Empresas\\simulaciones_protocolo\\tabla_infecciosos_trabajando.png",
								"C:\\Users\\Patricio Foncea\\Dropbox (MIT)\\CORONAVIRUS\\Protocolo de Empresas\\simulaciones_protocolo\\tabla_r0=2.png",
								"C:\\Users\\Patricio Foncea\\Dropbox (MIT)\\CORONAVIRUS\\Protocolo de Empresas\\simulaciones_protocolo\\tabla_sumario.png",
								"C:\\Users\\Patricio Foncea\\Dropbox (MIT)\\CORONAVIRUS\\Protocolo de Empresas\\simulaciones_protocolo\\TEST_DESVSTD.csv",
								"C:\\Users\\Patricio Foncea\\Dropbox (MIT)\\CORONAVIRUS\\Protocolo de Empresas\\simulaciones_protocolo\\transformar_datos.R",
								"C:\\Users\\Patricio Foncea\\Dropbox (MIT)\\CORONAVIRUS\\Protocolo de Empresas\\simulaciones_protocolo\\visualizar_simulaciones.R",
								"C:\\Users\\Patricio Foncea\\Dropbox (MIT)\\CORONAVIRUS\\Protocolo de Empresas\\simulaciones_protocolo\\visualizar_simulaciones_2.R",
								"C:\\Users\\Patricio Foncea\\Dropbox (MIT)\\CORONAVIRUS\\Protocolo de Empresas\\simulaciones_protocolo\\visualizar_simulaciones_3.R",
								"C:\\Users\\Patricio Foncea\\Dropbox (MIT)\\CORONAVIRUS\\Protocolo de Empresas\\simulaciones_protocolo\\visualizar_simulaciones_arauco.R",
								"C:\\Users\\Patricio Foncea\\Dropbox (MIT)\\CORONAVIRUS\\Protocolo de Empresas\\simulaciones_protocolo\\visualizar_simulaciones_v2.R",
								"C:\\Users\\Patricio Foncea\\Dropbox (MIT)\\CORONAVIRUS\\Protocolo de Empresas\\simulaciones_protocolo\\visualizar_simulaciones_v2_2.R",
								"C:\\Users\\Patricio Foncea\\Dropbox (MIT)\\CORONAVIRUS\\Protocolo de Empresas\\simulaciones_protocolo\\visualizar_simulaciones_v3.R"
							],
							"dired_path": "C:\\Users\\Patricio Foncea\\Dropbox (MIT)\\CORONAVIRUS\\Protocolo de Empresas\\simulaciones_protocolo\\",
							"dired_rename_mode": false,
							"dired_stop_preview_thread": true,
							"syntax": "Packages/FileBrowser/dired.sublime-syntax",
							"tab_size": 3,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 27.0
	},
	"input":
	{
		"height": 127.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				2
			],
			[
				1,
				0,
				2,
				2
			],
			[
				2,
				0,
				3,
				1
			],
			[
				2,
				1,
				3,
				2
			]
		],
		"cols":
		[
			0.0,
			0.328125,
			0.657291666667,
			1.0
		],
		"rows":
		[
			0.0,
			0.5,
			1.0
		]
	},
	"menu_visible": false,
	"output.exec":
	{
		"height": 308.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "",
	"project": "codelco.sublime-project",
	"replace":
	{
		"height": 50.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 2,
	"settings":
	{
	},
	"show_minimap": false,
	"show_open_files": true,
	"show_tabs": true,
	"side_bar_visible": false,
	"side_bar_width": 226.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
